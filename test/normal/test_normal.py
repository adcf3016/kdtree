import sys
from pathlib import Path
path_scripts = Path(__file__).resolve().parents[2]
sys.path.append(str(path_scripts))
from lib.kdtree import *
import pytest

def test_nearest_neighbor():
    kd_tree = KDTree()
    kd_tree.insert(Point([1.0, 2.0, 3.0]))
    kd_tree.insert(Point([4.0, 5.0, 6.0]))
    kd_tree.insert(Point([7.0, 8.0, 9.0]))
    kd_tree.insert(Point([10.0, 11.0, 12.0]))
    kd_tree.insert(Point([13.0, 14.0, 15.0]))
    kd_tree.insert(Point([16.0, 17.0, 18.0]))
    kd_tree.insert(Point([19.0, 20.0, 21.0]))
    kd_tree.insert(Point([22.0, 23.0, 24.0]))
    kd_tree.insert(Point([25.0, 26.0, 27.0]))
    kd_tree.insert(Point([28.0, 29.0, 30.0]))
    kd_tree.insert(Point([2.0, 3.0, 4.0]))
    kd_tree.insert(Point([5.0, 6.0, 7.0]))
    kd_tree.insert(Point([8.0, 9.0, 10.0]))
    kd_tree.insert(Point([2.6, 5.0, 120.0]))
    kd_tree.insert(Point([1.0, 3.0, 6.0]))
    kd_tree.insert(Point([4.0, 6.0, 3.0]))
    kd_tree.insert(Point([5.0, 4.0, 8.0]))
    near = kd_tree.nearest_neighbor(Point([3.0, 5.0, 8.0]))
    assert(near.coordinates[0] == 5.0)
    assert(near.coordinates[1] == 4.0)
    assert(near.coordinates[2] == 8.0)

def test_range_search():
    kd_tree = KDTree()
    kd_tree.insert(Point([1.0, 2.0, 3.0]))
    kd_tree.insert(Point([4.0, 5.0, 6.0]))
    kd_tree.insert(Point([7.0, 8.0, 9.0]))
    kd_tree.insert(Point([10.0, 11.0, 12.0]))
    kd_tree.insert(Point([13.0, 14.0, 15.0]))
    kd_tree.insert(Point([16.0, 17.0, 18.0]))
    kd_tree.insert(Point([19.0, 20.0, 21.0]))
    kd_tree.insert(Point([22.0, 23.0, 24.0]))
    kd_tree.insert(Point([25.0, 26.0, 27.0]))
    kd_tree.insert(Point([28.0, 29.0, 30.0]))
    kd_tree.insert(Point([2.0, 3.0, 4.0]))
    kd_tree.insert(Point([5.0, 6.0, 7.0]))
    kd_tree.insert(Point([8.0, 9.0, 10.0]))
    kd_tree.insert(Point([2.6, 5.0, 120.0]))
    kd_tree.insert(Point([1.0, 3.0, 6.0]))
    kd_tree.insert(Point([4.0, 6.0, 3.0]))
    kd_tree.insert(Point([5.0, 4.0, 8.0]))
    result = kd_tree.range_search(Point([2.0, 3.0, 3.0]), Point([6.0, 7.0, 8.0]))
    i = 0
    assert(result[i].coordinates[0] == 4.0 and result[i].coordinates[1] == 5.0 and result[i].coordinates[2] == 6.0)
    i += 1
    assert(result[i].coordinates[0] == 2.0 and result[i].coordinates[1] == 3.0 and result[i].coordinates[2] == 4.0)
    i += 1
    assert(result[i].coordinates[0] == 5.0 and result[i].coordinates[1] == 4.0 and result[i].coordinates[2] == 8.0)
    i += 1
    assert(result[i].coordinates[0] == 5.0 and result[i].coordinates[1] == 6.0 and result[i].coordinates[2] == 7.0)
    i += 1
    assert(result[i].coordinates[0] == 4.0 and result[i].coordinates[1] == 6.0 and result[i].coordinates[2] == 3.0)

def test_find_min_in_dimension():
    kd_tree = KDTree()
    kd_tree.insert(Point([1.0, 2.0, 3.0]))
    kd_tree.insert(Point([4.0, 5.0, 6.0]))
    kd_tree.insert(Point([7.0, 8.0, 9.0]))
    kd_tree.insert(Point([10.0, 11.0, 12.0]))
    kd_tree.insert(Point([13.0, 14.0, 15.0]))
    kd_tree.insert(Point([16.0, 17.0, 18.0]))
    kd_tree.insert(Point([19.0, 20.0, 21.0]))
    kd_tree.insert(Point([22.0, 23.0, 24.0]))
    kd_tree.insert(Point([25.0, 26.0, 27.0]))
    kd_tree.insert(Point([28.0, 29.0, 30.0]))
    kd_tree.insert(Point([2.0, 3.0, 4.0]))
    kd_tree.insert(Point([5.0, 6.0, 7.0]))
    kd_tree.insert(Point([8.0, 9.0, 10.0]))
    kd_tree.insert(Point([2.6, 5.0, 120.0]))
    kd_tree.insert(Point([1.0, 3.0, 6.0]))
    kd_tree.insert(Point([4.0, 6.0, 3.0]))
    kd_tree.insert(Point([5.0, 4.0, 8.0]))
    result = kd_tree.find_min_value_in_dimension(0)
    assert(result == 1.0)
    result = kd_tree.find_min_value_in_dimension(1)
    assert(result == 2.0)
    result = kd_tree.find_min_value_in_dimension(2)
    assert(result == 3.0)

def test_find_max_in_dimension():
    kd_tree = KDTree()
    kd_tree.insert(Point([1.0, 2.0, 3.0]))
    kd_tree.insert(Point([4.0, 5.0, 6.0]))
    kd_tree.insert(Point([7.0, 8.0, 9.0]))
    kd_tree.insert(Point([10.0, 11.0, 12.0]))
    kd_tree.insert(Point([13.0, 14.0, 15.0]))
    kd_tree.insert(Point([16.0, 17.0, 18.0]))
    kd_tree.insert(Point([19.0, 20.0, 21.0]))
    kd_tree.insert(Point([22.0, 23.0, 24.0]))
    kd_tree.insert(Point([25.0, 26.0, 27.0]))
    kd_tree.insert(Point([28.0, 29.0, 30.0]))
    kd_tree.insert(Point([2.0, 3.0, 4.0]))
    kd_tree.insert(Point([5.0, 6.0, 7.0]))
    kd_tree.insert(Point([8.0, 9.0, 10.0]))
    kd_tree.insert(Point([2.6, 5.0, 120.0]))
    kd_tree.insert(Point([1.0, 3.0, 6.0]))
    kd_tree.insert(Point([4.0, 6.0, 3.0]))
    kd_tree.insert(Point([5.0, 4.0, 8.0]))
    result = kd_tree.find_max_value_in_dimension(0)
    assert(result == 28.0)
    result = kd_tree.find_max_value_in_dimension(1)
    assert(result == 29.0)
    result = kd_tree.find_max_value_in_dimension(2)
    assert(result == 120.0)

def test_contains_point():
    kd_tree = KDTree()
    kd_tree.insert(Point([1.0, 2.0, 3.0]))
    kd_tree.insert(Point([4.0, 5.0, 6.0]))
    kd_tree.insert(Point([7.0, 8.0, 9.0]))
    kd_tree.insert(Point([10.0, 11.0, 12.0]))
    kd_tree.insert(Point([13.0, 14.0, 15.0]))
    kd_tree.insert(Point([16.0, 17.0, 18.0]))
    kd_tree.insert(Point([19.0, 20.0, 21.0]))
    kd_tree.insert(Point([22.0, 23.0, 24.0]))
    kd_tree.insert(Point([25.0, 26.0, 27.0]))
    kd_tree.insert(Point([28.0, 29.0, 30.0]))
    kd_tree.insert(Point([2.0, 3.0, 4.0]))
    kd_tree.insert(Point([5.0, 6.0, 7.0]))
    kd_tree.insert(Point([8.0, 9.0, 10.0]))
    kd_tree.insert(Point([2.6, 5.0, 120.0]))
    kd_tree.insert(Point([1.0, 3.0, 6.0]))
    kd_tree.insert(Point([4.0, 6.0, 3.0]))
    kd_tree.insert(Point([5.0, 4.0, 8.0]))
    result = kd_tree.contains_point(Point([4.0, 6.0, 3.0]))
    assert(result == True)
    result = kd_tree.contains_point(Point([2.0, 3.0, 5.0]))
    assert(result == False)
    result = kd_tree.contains_point(Point([2.6, 5.0, 120.0]))
    assert(result == True)
    result = kd_tree.contains_point(Point([3.0, 5.0, 8.0]))
    assert(result == False)
